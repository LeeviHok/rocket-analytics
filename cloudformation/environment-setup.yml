Parameters:
  Region:
    Description: Select region where service will be hosted
    Type: String
    Default: eu-north-1
    AllowedValues:
      # US
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      # Asia
      - ap-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      # Canada
      - ca-central-1
      # Europe
      - eu-central-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-north-1
      # South America
      - sa-east-1

  GitRepository:
    Description: Enter Git repository URL (eg. https://github.com/ExampleUser/repository-name.git)
    Type: String

  GitBranch:
    Description: Enter git repository release branch name
    Type: String
    Default: main

  AmiId:
    Description: Enter AMI ID (Use Ubuntu Server 22.04 LTS)
    Type: String

  PostgresUsername:
    Description: Username for the PostgreSQL database user
    Type: String
    Default: postgres

  PostgresPassword:
    Description: Password for the PostgreSQL database user
    Type: String
    NoEcho: true

  PostgresDatabase:
    Description: Name for the PostgreSQL database
    Type: String
    Default: rockets

  SshIpAddress:
    Description: Enter IPv4 address which can access server over SSH
    Type: String

  AdminUserEmail:
    Description: Email address for the website administrator account
    Type: String

  AdminUserPassword:
    Description: Password for the website administrator account
    Type: String
    NoEcho: true

Conditions:
  HasSshIpAddress: !Not [!Equals [!Ref SshIpAddress, ""]]

Resources:
  # IAM Policies
  EcrPullPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      # AWS documentation states the following:
      # "Naming an IAM resource can cause an unrecoverable error if you reuse
      # the same template in multiple Regions."
      # They recommend adding region into the IAM resource name dynamically to
      # avoid this potentially unrecoverable error.
      ManagedPolicyName: !Sub "EcrPull-${Region}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: GetAuthorizationToken
            Effect: Allow
            Action: ecr:GetAuthorizationToken
            Resource: "*"

          - Sid: PullImagesFromRepositories
            Effect: Allow
            Action:
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
            Resource:
              - !GetAtt EcrRepositoryApi.Arn
              - !GetAtt EcrRepositoryNginx.Arn
              - !GetAtt EcrRepositoryPostgres.Arn

  SsmReadParameterPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "SsmReadParameter-${Region}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Sid: ReadSsmParameter
          Effect: Allow
          Action: ssm:GetParameter
          Resource: "*"

  GetSecretValuePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "SecretsManagerGetValue-${Region}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Sid: GetSecretValue
          Effect: Allow
          Action: secretsmanager:GetSecretValue
          Resource: "*"

  # IAM Roles
  ServerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "Server-${Region}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref EcrPullPolicy
        - !Ref SsmReadParameterPolicy
        - !Ref GetSecretValuePolicy

  # EIP addresses
  ServerIpAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # Web server instance profile
  ServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "ServerInstanceProfile-${Region}"
      Roles:
        - Ref: ServerRole

  # SSM Parameter Store parameters
  AmiIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: EC2 server instance AMI ID
      Name: ServerAmiId
      Tier: Standard
      Type: String
      Value: !Ref AmiId

  GitRepositoryParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: Git repository URL for source code
      Name: GitRepository
      Tier: Standard
      Type: String
      Value: !Ref GitRepository

  GitBranchParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: Git repository release branch name
      Name: GitBranch
      Tier: Standard
      Type: String
      Value: !Ref GitBranch

  SecurityGroupIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: Security group ID for the web server
      Name: ServerSecurityGroupId
      Tier: Standard
      Type: String
      Value: !GetAtt ServerSecurityGroup.GroupId

  ServerIpAddressIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: Elastic IP address ID for the web server
      Name: ServerIpAddressId
      Tier: Standard
      Type: String
      Value: !GetAtt ServerIpAddress.AllocationId

  RegionParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: AWS region for the web service
      Name: ServiceRegion
      Tier: Standard
      Type: String
      Value: !Ref Region

  AvailabilityZoneParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: Availability zone for the web service
      Name: ServiceAvailabilityZone
      Tier: Standard
      Type: String
      Value: !Select [0, Fn::GetAZs: !Ref Region]

  DatabaseVolumeParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: Database EBS volume ID
      Name: DatabaseVolumeId
      Tier: Standard
      Type: String
      Value: !GetAtt DatabaseVolume.VolumeId

  PostgresUsernameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: Username for the PostgreSQL database
      Name: PSQL_USER
      Tier: Standard
      Type: String
      Value: !Ref PostgresUsername

  PostgresPasswordParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: Password for the PostgreSQL user
      Name: PSQL_PWD
      Tier: Standard
      Type: String
      Value: !Ref PostgresPassword

  PostgresDatabaseParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: Name for the PostgreSQL database
      Name: PSQL_DB
      Tier: Standard
      Type: String
      Value: !Ref PostgresDatabase

  DockerRegistryParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: Base URI to the Elastic Container Registry
      Name: DockerRegistry
      Tier: Standard
      Type: String
      Value: !Sub "${AWS::AccountId}.dkr.ecr.${Region}.amazonaws.com"

  # Secrets Manager secrets
  AdminUserSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Credentials for the website administrator account
      Name: AdminUser
      SecretString: !Sub '{
        "email": "${AdminUserEmail}",
        "password": "${AdminUserPassword}"
      }'

  # ECR repositories
  EcrRepositoryApi:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: rocket-analytics/api

  EcrRepositoryNginx:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: rocket-analytics/nginx

  EcrRepositoryPostgres:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: rocket-analytics/postgres

  # Database volume
  DatabaseVolume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !GetAtt AvailabilityZoneParameter.Value
      Size: 8
      VolumeType: gp3

  # SSH key
  SshKey:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: RocketAnalyticsSsh
      KeyType: ed25519

  # Security group
  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Server
      GroupDescription: HTTP and SSH traffic to the web server
      SecurityGroupIngress:
        - Description: Open HTTP to the NGINX
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

        # Create rule for SSH if IP address parameter is provided
        - !If
          - HasSshIpAddress
          - Description: Open SSH to the EC2
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Sub "${SshIpAddress}/32"
          - !Ref AWS::NoValue
