Parameters:
  GitRepository:
    Description: Git repository URL (eg. https://github.com/ExampleUser/repository-name.git)
    Type: String

  GitBranch:
    Description: Git repository release branch name
    Type: String
    Default: main

  WebServerAmiId:
    Description: AMI ID for the web server (Use Ubuntu Server 22.04 LTS)
    Type: String

  PostgresUsername:
    Description: Username for the Postgres database user
    Type: String
    Default: rocket_analytics_user
    AllowedPattern: ^(?!postgres$).* # Do not allow to use postgres
    ConstraintDescription: Username postgres is reserved for the database supreuser.

  PostgresPassword:
    Description: Password for the Postgres database user
    Type: String
    NoEcho: true

  PostgresSuperuserPassword:
    Description: Password for the Postgres superuser (postgres)
    Type: String
    NoEcho: true

  PostgresDatabase:
    Description: Postgres database name
    Type: String
    Default: rockets

  SshIpAddress:
    Description: IPv4 address which can access web server over SSH
    Type: String

  AdminUserEmail:
    Description: Email address for the website administrator account
    Type: String

  AdminUserPassword:
    Description: Password for the website administrator account
    Type: String
    NoEcho: true

Conditions:
  HasSshIpAddress: !Not [!Equals [!Ref SshIpAddress, ""]]

Resources:
  # IAM Policies
  EcrPullPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      # AWS documentation states the following:
      # "Naming an IAM resource can cause an unrecoverable error if you reuse
      # the same template in multiple Regions."
      # They recommend adding region into the IAM resource name dynamically to
      # avoid this potentially unrecoverable error.
      ManagedPolicyName: !Sub "EcrPull-${AWS::Region}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: GetAuthorizationToken
            Effect: Allow
            Action: ecr:GetAuthorizationToken
            Resource: "*"

          - Sid: PullImagesFromRepositories
            Effect: Allow
            Action:
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
            Resource:
              - !GetAtt EcrRepositoryApi.Arn
              - !GetAtt EcrRepositoryNginx.Arn
              - !GetAtt EcrRepositoryPostgres.Arn

  SsmReadParameterPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "SsmReadParameter-${AWS::Region}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Sid: ReadSsmParameter
          Effect: Allow
          Action: ssm:GetParameter
          Resource: "*"

  GetSecretValuePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "SecretsManagerGetValue-${AWS::Region}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Sid: GetSecretValue
          Effect: Allow
          Action: secretsmanager:GetSecretValue
          Resource: "*"

  # IAM Roles
  WebServerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "WebServer-${AWS::Region}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref EcrPullPolicy
        - !Ref SsmReadParameterPolicy
        - !Ref GetSecretValuePolicy

  # EIP addresses
  WebServerIpAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # Instance profiles
  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "WebServerInstanceProfile-${AWS::Region}"
      Roles:
        - Ref: WebServerRole

  # SSM Parameter Store parameters
  WebServerAmiIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: Web server EC2 instance AMI ID
      Name: WebServerAmiId
      Tier: Standard
      Type: String
      Value: !Ref WebServerAmiId

  GitRepositoryParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: Git repository URL for source code
      Name: GitRepository
      Tier: Standard
      Type: String
      Value: !Ref GitRepository

  GitBranchParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: Git repository release branch name
      Name: GitBranch
      Tier: Standard
      Type: String
      Value: !Ref GitBranch

  WebServerSecurityGroupIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: Web server security group ID
      Name: WebServerSecurityGroupId
      Tier: Standard
      Type: String
      Value: !GetAtt WebServerSecurityGroup.GroupId

  WebServerIpAddressIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: Web server Elastic IP address ID
      Name: WebServerIpAddressId
      Tier: Standard
      Type: String
      Value: !GetAtt WebServerIpAddress.AllocationId

  RegionParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: AWS region for CloudFormation resources
      Name: Region
      Tier: Standard
      Type: String
      Value: !Ref AWS::Region

  AvailabilityZoneParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: Availability zone for CloudFormation resources
      Name: AvailabilityZone
      Tier: Standard
      Type: String
      Value: !Select [0, Fn::GetAZs: !Ref AWS::Region]

  DatabaseVolumeIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: Database EBS volume ID
      Name: DatabaseVolumeId
      Tier: Standard
      Type: String
      Value: !GetAtt DatabaseVolume.VolumeId

  PostgresDatabaseParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: Postgres database name
      Name: PostgresDatabase
      Tier: Standard
      Type: String
      Value: !Ref PostgresDatabase

  DockerRegistryParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: Docker container registry base URI
      Name: DockerRegistry
      Tier: Standard
      Type: String
      Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com"

  # Secrets Manager secrets
  AdminUserSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Website administrator account credentials
      Name: AdminUser
      SecretString: !Sub '{
        "email": "${AdminUserEmail}",
        "password": "${AdminUserPassword}"
      }'

  PostgresUserSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Postgres database user credentials
      Name: PostgresUser
      SecretString: !Sub '{
        "username": "${PostgresUsername}",
        "password": "${PostgresPassword}"
      }'

  PostgresSuperuserSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Postgres superuser credentials
      Name: PostgresSuperuser
      SecretString: !Sub '{
        "username": "postgres",
        "password": "${PostgresSuperuserPassword}"
      }'

  # ECR repositories
  EcrRepositoryApi:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: rocket-analytics/api

  EcrRepositoryNginx:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: rocket-analytics/nginx

  EcrRepositoryPostgres:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: rocket-analytics/postgres

  # EC2 volumes
  DatabaseVolume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !GetAtt AvailabilityZoneParameter.Value
      Size: 8
      VolumeType: gp3

  # SSH keys
  SshKey:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: RocketAnalyticsSsh
      KeyType: ed25519

  # Security groups
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebServer
      GroupDescription: HTTP and SSH traffic to the web server
      SecurityGroupIngress:
        - Description: Open HTTP to the NGINX
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

        # Create rule for SSH if IP address parameter is provided
        - !If
          - HasSshIpAddress
          - Description: Open SSH to the web server
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Sub "${SshIpAddress}/32"
          - !Ref AWS::NoValue
