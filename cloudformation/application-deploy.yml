Parameters:
  AmiId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: ServerAmiId

  AvailabilityZone:
    Type: AWS::SSM::Parameter::Value<String>
    Default: ServiceAvailabilityZone

  DatabaseVolumeId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: DatabaseVolumeId

  GitRepository:
    Type: AWS::SSM::Parameter::Value<String>
    Default: GitRepository

  GitRepositoryBranch:
    Type: AWS::SSM::Parameter::Value<String>
    Default: GitRepositoryBranch

  InstanceType:
    Type: AWS::SSM::Parameter::Value<String>
    Default: ServerInstanceType

  Region:
    Type: AWS::SSM::Parameter::Value<String>
    Default: ServiceRegion

  SecurityGroup:
    Type: AWS::SSM::Parameter::Value<String>
    Default: ServerSecurityGroup

Resources:
  Server:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      IamInstanceProfile: !Sub "ServerInstanceProfile-${Region}"
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      KeyName: RocketAnalyticsSsh
      SecurityGroupIds:
        - !Ref SecurityGroup
      Volumes:
        - Device: /dev/sdf
          VolumeId: !Ref DatabaseVolumeId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          install_updates () {
            DEBIAN_FRONTEND=noninteractive apt-get -y update
            DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade
          }

          install_docker () {
            DEBIAN_FRONTEND=noninteractive apt-get -y install ca-certificates curl gnupg lsb-release

            mkdir -m 0755 -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

            DEBIAN_FRONTEND=noninteractive apt-get -y update
            DEBIAN_FRONTEND=noninteractive apt-get -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          }

          install_application () {
            DEBIAN_FRONTEND=noninteractive apt-get -y update
            DEBIAN_FRONTEND=noninteractive apt-get -y install git awscli

            git clone ${GitRepository} /home/ubuntu/rocket-analytics
            git -C /home/ubuntu/rocket-analytics checkout ${GitRepositoryBranch}

            touch /home/ubuntu/rocket-analytics/.env && chmod 600 /home/ubuntu/rocket-analytics/.env
            echo "PSQL_USER=$(aws ssm get-parameter --name 'PSQL_USER' --region ${Region} --query 'Parameter.Value' --output text)" | tee -a /home/ubuntu/rocket-analytics/.env
            echo "PSQL_PWD=$(aws ssm get-parameter --name 'PSQL_PWD' --region ${Region} --query 'Parameter.Value' --output text)" | tee -a /home/ubuntu/rocket-analytics/.env
            echo "PSQL_DB=$(aws ssm get-parameter --name 'PSQL_DB' --region ${Region} --query 'Parameter.Value' --output text)" | tee -a /home/ubuntu/rocket-analytics/.env
            echo "DOCKER_REGISTRY=$(aws ssm get-parameter --name 'DOCKER_REGISTRY' --region ${Region} --query 'Parameter.Value' --output text)" | tee -a /home/ubuntu/rocket-analytics/.env
          }

          install_aws_cli () {
            DEBIAN_FRONTEND=noninteractive apt-get -y install awscli
          }

          create_install_script () {
            # Create script which will be executed as a root after system startup
            touch /etc/rc.local && chmod 700 /etc/rc.local
            echo '#!/bin/bash' | tee -a /etc/rc.local

            # Add install functions to the script
            declare -f install_docker | tee -a /etc/rc.local
            declare -f install_application | tee -a /etc/rc.local
            declare -f install_aws_cli | tee -a /etc/rc.local

            # Execute install functions
            echo 'install_docker' | tee -a /etc/rc.local
            echo 'install_application' | tee -a /etc/rc.local
            echo 'install_aws_cli' | tee -a /etc/rc.local

            # Start the application
            echo 'sleep 1m' | tee -a /etc/rc.local
            echo 'aws ecr get-login-password --region ${Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${Region}.amazonaws.com' | tee -a /etc/rc.local
            echo 'docker compose -f /home/ubuntu/rocket-analytics/docker-compose.yml pull' | tee -a /etc/rc.local
            echo 'docker compose -f /home/ubuntu/rocket-analytics/docker-compose.yml up -d --no-build' | tee -a /etc/rc.local

            # Delete install script
            echo 'rm $0' | tee -a /etc/rc.local
          }

          # This will likely update the kernel which will require reboot
          install_updates

          # This script will run rest of the installation after reboot
          create_install_script
          reboot
